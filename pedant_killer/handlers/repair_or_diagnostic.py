from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from pedant_killer.–∫eyboards.question import (
    get_users_phone,
    get_users_city,
    get_yes_or_no,
    back
)
from pedant_killer.handlers.base_commands import cmd_start
from pedant_killer.filters.repair import (
    FilterPhoneNumber,
    FilterYesNo
)

router_for_diagnostics = Router()


class Repair(StatesGroup):
    model = State()
    defect = State()
    city = State()
    confirm = State()
    number = State()
    location_to = State()
    location_second = State()


@router_for_diagnostics.message(StateFilter(None), F.text == "–ù—É–∂–µ–Ω —Ä–µ–º–æ–Ω—Ç/–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
async def diagnostic_start_handler(message: Message, state: FSMContext) -> None:
    await state.set_state(Repair.model)
    await message.answer(
        "üíª –ù–∞–ø–∏—à–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö",
        reply_markup=back()
    )  # –ó–¥–µ—Å—å –¥–æ–ø–∏—Å–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–æ–¥–µ–ª—è–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤


@router_for_diagnostics.message(Repair.model)  # –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä-–ø—Ä–æ–≤–µ—Ä–∫—É –≤–≤–µ–¥–µ–Ω–æ–π –º–æ–¥–µ–ª–∏
async def handle_model_selection(message: Message, state: FSMContext) -> None:
    await state.update_data(model=message.text)
    await state.set_state(Repair.defect)
    await message.answer("üõ†Ô∏è –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É", reply_markup=back())  # –ó–¥–µ—Å—å –¥–æ–ø–∏—Å–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—è–º–∏


@router_for_diagnostics.message(Repair.defect)  # –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä-–ø—Ä–æ–≤–µ—Ä–∫—É –≤–≤–µ–¥–µ–Ω–Ω–æ–π –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏
async def handle_defect_selection(message: Message, state: FSMContext) -> None:
    await state.update_data(defect=message.text)
    await state.set_state(Repair.city)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å", reply_markup=get_users_city())


@router_for_diagnostics.message(Repair.city)  # –ù—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä-–ø—Ä–æ–≤–µ—Ä–∫—É –≥–æ—Ä–æ–¥–∞
async def handle_city_selection(message: Message, state: FSMContext) -> None:
    await state.update_data(city=message.text.lower())
    await state.set_state(Repair.confirm)
    await message.answer(
        "üíµ –¶–µ–Ω–∞ —Ä–µ–º–æ–Ω—Ç–∞ –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ...\n\n"
        "‚úÖ –û—Ñ–æ—Ä–º–ª—è—é –∑–∞–∫–∞–∑?",
        reply_markup=get_yes_or_no()
    )  # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è —Ü–µ–Ω–∞ —Ä–µ–º–æ–Ω—Ç–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π


@router_for_diagnostics.message(FilterYesNo(), Repair.confirm)
async def handler_confirm(message: Message, state: FSMContext) -> None:
    if message.text.lower() == "–¥–∞":
        await state.update_data(confirm="yes")
        await message.answer("üìû –•–æ—Ä–æ—à–æ, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏", reply_markup=get_users_phone())
        await state.set_state(Repair.number)

    elif message.text.lower() == "–Ω–µ—Ç":
        await message.answer("‚ùå <b>–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞</b>. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ")
        await state.clear()
        await state.set_data({})
        await cmd_start(message, state)


@router_for_diagnostics.message(Repair.confirm)
async def handler_does_not_confirm(message: Message) -> None:
    await message.answer("<b>–û—Ñ–æ—Ä–º–ª—è—é –∑–∞–∫–∞–∑?</b>", reply_markup=get_yes_or_no())


@router_for_diagnostics.message(FilterPhoneNumber(), Repair.number)
async def handle_number_selection(message: Message, state: FSMContext) -> None:
    data = await state.get_data()

    if message.contact is not None:
        await state.update_data(number=message.contact.phone_number)
    else:
        await state.update_data(number=message.text)

    if data['city'].lower().strip() == "–º–æ—Å–∫–≤–∞":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å: <b>–£–ª–∏—Ü–∞, –î–æ–º, –ö–≤–∞—Ä—Ç–∏—Ä–∞</b>")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å: <b>–ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º, –ö–≤–∞—Ä—Ç–∏—Ä–∞</b>")

    await state.set_state(Repair.location_to)


@router_for_diagnostics.message(Repair.number)
async def handle_invalid_number(message: Message) -> None:
    await message.answer("<b>‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>", reply_markup=get_users_phone())


@router_for_diagnostics.message(Repair.location_to)
async def handler_location_to(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    await state.update_data(location_first=message.text)
    await state.set_state(Repair.location_second)
    if data["city"].lower().strip() == "–º–æ—Å–∫–≤–∞":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å: <b>–£–ª–∏—Ü–∞, –î–æ–º, –ö–≤–∞—Ä—Ç–∏—Ä–∞</b>",
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å: <b>–ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º, –ö–≤–∞—Ä—Ç–∏—Ä–∞</b>",
            reply_markup=ReplyKeyboardRemove()  # –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É "–¢–æ—Ç –∂–µ –∞–¥—Ä–µ—Å"
        )


@router_for_diagnostics.message(Repair.location_second)
async def handler_location_from(message: Message, state: FSMContext) -> None:
    data = await state.get_data()
    await message.answer(
        f'üéâ <b>{message.from_user.full_name}</b>, –í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω.\n\n'
        f'üíª <b>–ú–æ–¥–µ–ª—å:</b> {data["model"]}\n\n'
        f'üîß <b>–î–µ—Ñ–µ–∫—Ç:</b> {data["defect"]}\n\n'
        f'üìû <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {data["number"]}',
        reply_markup=ReplyKeyboardRemove()
    )
    await state.clear()
    await cmd_start(message, state)
