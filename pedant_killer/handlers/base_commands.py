from random import choice

from aiogram import Router, F
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from pydantic import ValidationError
import logging

from pedant_killer.–∫eyboards.question import get_users_target, agreement
from pedant_killer.containers import container
from pedant_killer.schemas.user_schema import UserPostDTO, UserPartialDTO

base_router = Router()
user = container.user_service()
bot_cmd_start_logger = logging.getLogger('bot_cmd_start_logger')


@base_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext) -> None:
    await state.clear()
    user_get_result = await user.get_user(UserPartialDTO(telegram_id=message.from_user.id))
    if not user_get_result:
        await message.answer(
            '‚òëÔ∏è <b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å",\n —á—Ç–æ–± –ø—Ä–∏–Ω—è—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</b>',
            reply_markup=agreement()
        )

    else:
        await message.answer(
            f'<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b> {message.from_user.first_name} {message.from_user.last_name}, '
            f'–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>{choice(["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–û–ª–µ–≥"])}</b> üßë‚Äçüíº\n\n'
            f'‚úÖ –î–∞–≤–∞–π—Ç–µ —è –í–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é\n\n'
            f'–ù–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç üëá',
            parse_mode=ParseMode.HTML,
            reply_markup=get_users_target(),
            one_time_keyboard=True
        )
        bot_cmd_start_logger.info(f'–ö–ª–∏–µ–Ω—Ç :{message.from_user.id} –µ—Å—Ç—å –≤ –±–∞–∑–µ')


@base_router.callback_query(F.data == 'agree')
async def handler_agree(callback: CallbackQuery):
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.edit_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
    bot_cmd_start_logger.info(f'–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—è—Ç–æ –∫–ª–∏–µ–Ω—Ç–æ–º {callback.from_user.id}')

    try:
        user_dto = UserPostDTO(access_level_id=1,
                               telegram_username=callback.from_user.username,
                               telegram_id=callback.from_user.id,
                               full_name=callback.from_user.full_name,
                               )

        user_save_result = await user.save_user(user_dto)
        if user_save_result:

            await callback.message.answer(
                f'<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b> {callback.from_user.first_name} {callback.from_user.last_name}, '
                f'–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>{choice(["–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–û–ª–µ–≥"])}</b> üßë‚Äçüíº\n\n'
                f'‚úÖ –î–∞–≤–∞–π—Ç–µ —è –í–∞—Å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é\n\n'
                f'–ù–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç üëá',
                parse_mode=ParseMode.HTML,
                reply_markup=get_users_target(),
                one_time_keyboard=True
            )

    except ValidationError as e:
        bot_cmd_start_logger.info(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id} –≤ —Å–∏—Å—Ç–µ–º–µ')
        await callback.message.answer(
            f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}',
            reply_markup=get_users_target(),
            one_time_keyboard=True
        )



